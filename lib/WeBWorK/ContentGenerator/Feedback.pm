################################################################################
# WeBWorK Online Homework Delivery System
# Copyright &copy; 2000-2022 The WeBWorK Project, https://github.com/openwebwork
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of either: (a) the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any later
# version, or (b) the "Artistic License" which comes with this package.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See either the GNU General Public License or the
# Artistic License for more details.
################################################################################

package WeBWorK::ContentGenerator::Feedback;
use parent qw(WeBWorK::ContentGenerator);

=head1 NAME

WeBWorK::ContentGenerator::Feedback - Send mail to professors.

=cut

use strict;
use warnings;
use utf8;

use Data::Dumper;
use Email::Stuffer;
use Try::Tiny;
use Text::Wrap qw(wrap);

use WeBWorK::Upload;
use WeBWorK::Utils qw/decodeAnswers/;

# request paramaters used
#
# user
# key
# module
# set (if from ProblemSet or Problem)
# problem (if from Problem)
# displayMode (if from Problem)
# showOldAnswers (if from Problem)
# showCorrectAnswers (if from Problem)
# showHints (if from Problem)
# showSolutions (if from Problem)

# state data sent
#
# user object for current user
# permission level of current user
# current session key
# which ContentGenerator module called Feedback?
# set object for current set (if from ProblemSet or Problem)
# problem object for current problem (if from Problem)
# display options (if from Problem)

sub initialize {
	my ($self) = @_;
	my $r      = $self->r;
	my $ce     = $r->ce;
	my $db     = $r->db;
	my $authz  = $r->authz;

	# get form fields
	my $userID    = $r->param('user');
	my $module    = $r->param('module');
	my $setID     = $r->param('set');
	my $problemID = $r->param('problem');
	my $from      = $r->param('from');
	my $feedback  = $r->param('feedback');
	my $courseID  = $r->urlpath->arg('courseID');

	my ($user, $set, $problem);

	$user = $db->getUser($userID) if $userID;
	$r->stash->{user_email_address} = $user ? $user->email_address : '';

	if (defined $user) {
		$set     = $db->getMergedSet($userID, $setID) if defined $setID && $setID ne '';
		$problem = $db->getMergedProblem($userID, $setID, $problemID)
			if defined $set && defined $problemID && $problemID ne '';
	} else {
		$set     = $db->getGlobalSet($setID) if defined $setID && $setID ne '';
		$problem = $db->getGlobalProblem($setID, $problemID)
			if defined $set && defined $problemID && $problemID ne '';
	}

	# Generate context URLs.
	(my $emailableURL, $r->stash->{returnURL}) = $self->generateURLs(set_id => $setID, problem_id => $problemID);

	return unless $authz->hasPermissions($userID, 'submit_feedback');

	# Determine the recipients of the email.
	my @recipients = $self->getFeedbackRecipients($user);
	$r->stash->{numRecipients} = scalar @recipients;

	return unless $r->stash->{numRecipients};

	if (defined $r->param('sendFeedback')) {
		# Get verbosity level.
		my $verbosity = $ce->{mail}{feedbackVerbosity};

		# Determine the sender of the email.
		my $sender;
		if ($user) {
			if ($user->email_address) {
				$sender = $user->rfc822_mailbox;
			} else {
				if ($user->full_name) {
					$sender = $user->full_name . " <$from>";
				} else {
					$sender = $from;
				}
			}
		} else {
			$sender = $from;
		}

		unless ($sender) {
			$r->stash->{send_error} = $r->maketext('No Sender specified.');
			return;
		}
		unless ($feedback) {
			$r->stash->{send_error} = $r->maketext('Message was blank.');
			return;
		}

		my %subject_map = (
			'c' => $courseID,
			'u' => $user    ? $user->user_id       : undef,
			's' => $set     ? $set->set_id         : undef,
			'p' => $problem ? $problem->problem_id : undef,
			'x' => $user    ? $user->section       : undef,
			'r' => $user    ? $user->recitation    : undef,
			'%' => '%',
		);
		my $chars   = join('', keys %subject_map);
		my $subject = $ce->{mail}{feedbackSubjectFormat} || 'WeBWorK question from %c: %u set %s/prob %p';
		$subject =~ s/%([$chars])/defined $subject_map{$1} ? $subject_map{$1} : ''/eg;

		# Get info about remote user.
		my $remote_host = $r->useragent_ip || 'UNKNOWN';
		my $remote_port = $r->remote_port  || 'UNKNOWN';

		my $systemURL = $self->systemLink(
			$r->urlpath->newFromModule("WeBWorK::ContentGenerator::Home", $r),
			authen      => 0,
			use_abs_url => 1
		);

		my $msg = qq/This  message was automatically generated by the WeBWorK
system at $systemURL, in response to a request from $remote_host:$remote_port.

Click this link to see the page from which the user sent feedback:
$emailableURL

/;

		if ($feedback) {
			$msg .= qq/***** The feedback message: *****\n\n\n$feedback\n\n\n/;
		}
		if ($problem and $verbosity >= 1) {
			$msg .=
				qq/***** Data about the problem processor: ***** \n\n/
				. 'Display Mode:         '
				. $r->param('displayMode') . "\n"
				. 'Show Old Answers:     '
				. ($r->param('showOldAnswers') ? 'yes' : 'no') . "\n"
				. 'Show Correct Answers: '
				. ($r->param('showCorrectAnswers') ? 'yes' : 'no') . "\n"
				. 'Show Hints:           '
				. ($r->param('showHints') ? 'yes' : 'no') . "\n"
				. 'Show Solutions:       '
				. ($r->param('showSolutions') ? 'yes' : 'no') . "\n\n";
		}

		if ($user && $verbosity >= 1) {
			$msg .= "***** Data about the user: *****\n\n";
			$msg .= $self->format_user($user) . "\n";
		}

		if ($problem && $verbosity >= 1) {
			$msg .= "***** Data about the problem: *****\n\n";
			$msg .= $self->format_userproblem($problem) . "\n";
		}
		if ($set && $verbosity >= 1) {
			$msg .= "***** Data about the homework set: *****\n\n" . $self->format_userset($set) . "\n";
		}
		if ($ce && $verbosity >= 2) {
			$msg .= "***** Data about the environment: *****\n\n" . Dumper($ce) . "\n\n";
		}

		my $email =
			Email::Stuffer->to(join(',', @recipients))->from($sender)->subject($subject)->text_body($msg)
			->header('X-Remote-Host' => $remote_host);

		# Extra headers
		$email->header('X-WeBWorK-Module', $module)   if defined $module;
		$email->header('X-WeBWorK-Course', $courseID) if defined $courseID;
		if ($user) {
			$email->header('X-WeBWorK-User',       $user->user_id);
			$email->header('X-WeBWorK-Section',    $user->section);
			$email->header('X-WeBWorK-Recitation', $user->recitation);
		}
		$email->header('X-WeBWorK-Set',     $set->set_id)         if $set;
		$email->header('X-WeBWorK-Problem', $problem->problem_id) if $problem;

		# Add the attachment if one was provided.
		my $fileIDhash = $r->param('attachment');
		if ($fileIDhash) {
			my $attachment =
				WeBWorK::Upload->retrieve(split(/\s+/, $fileIDhash), dir => $ce->{webworkDirs}{uploadCache});

			# Get the filename and read its contents.
			my $filename = $attachment->filename;
			my $fh       = $attachment->fileHandle;
			my $contents;
			{
				local $/;
				$contents = <$fh>;
			};
			close $fh;
			$attachment->dispose;

			# Check to see that this is an allowed filetype.
			unless (lc($filename =~ s/.*\.//r) =~ /^(jpe?g|gif|png|pdf|zip|txt|csv)$/) {
				$r->stash->{send_error} =
					$r->maketext('The filetype of the attached file "[_1]" is not allowed.', $filename);
				return;
			}

			# Check to see that the attached file does not exceed the allowed size.
			if (length($contents) > $ce->{mail}{maxAttachmentSize} * 1000000) {

				$r->stash->{send_error} =
					$r->maketext('The attached file "[_1]" exceeds the allowed attachment size of [quant,_2,megabyte].',
						$filename, $ce->{mail}{maxAttachmentSize});
				return;
			}

			# Attach the file.
			$email->attach($contents, filename => $filename);
		}

		# $ce->{mail}{set_return_path} is the address used to report returned email if defined and non empty.
		# It is an argument used in sendmail (via Email::Stuffer::send_or_die).
		# For arcane historical reasons sendmail actually sets the field "MAIL FROM" and the smtp server then
		# uses that to set "Return-Path".
		# references:
		#  https://stackoverflow.com/questions/1235534/
		#      what-is-the-behavior-difference-between-return-path-reply-to-and-from
		#  https://metacpan.org/pod/Email::Sender::Manual::QuickStart#envelope-information
		try {
			$email->send_or_die({
				# createEmailSenderTransportSMTP is defined in ContentGenerator
				transport => $self->createEmailSenderTransportSMTP(),
				$ce->{mail}{set_return_path} ? (from => $ce->{mail}{set_return_path}) : ()
			});
		} catch {
			$r->stash->{send_error} = $r->maketext('Failed to send message: [_1]', $_);
		};
	}

	return;
}

sub title {
	my ($self) = @_;
	my $r = $self->r;
	return $r->ce->{feedback_button_name} || $r->maketext('E-mail Instructor');
}

sub getFeedbackRecipients {
	my ($self, $user) = @_;
	my $ce    = $self->r->ce;
	my $db    = $self->r->db;
	my $authz = $self->r->authz;

	my @recipients;

	# send to all users with permission to receive_feedback and an email address
	foreach my $rcptName ($db->listUsers()) {
		if ($authz->hasPermissions($rcptName, "receive_feedback")) {
			my $rcpt = $db->getUser($rcptName);    # checked
			next
				if $ce->{feedback_by_section}
				and defined $user
				and defined $rcpt->section
				and defined $user->section
				and $rcpt->section ne $user->section;
			if ($rcpt and $rcpt->email_address) {
				push @recipients, $rcpt->rfc822_mailbox;
			}
		}
	}

	if (defined $ce->{mail}->{feedbackRecipients}) {
		push @recipients, @{ $ce->{mail}->{feedbackRecipients} };
	}

	return @recipients;
}

sub format_user {
	my ($self, $User) = @_;
	my $ce = $self->r->ce;

	my $result = "User ID:    " . $User->user_id . "\n";
	$result .= "Name:       " . $User->full_name . "\n";
	$result .= "Email:      " . $User->email_address . "\n";
	unless ($ce->{blockStudentIDinFeedback}) {
		$result .= "Student ID: " . $User->student_id . "\n";
	}

	my $status_name = $ce->status_abbrev_to_name($User->status);
	my $status_string =
		defined $status_name
		? "$status_name ('" . $User->status . "')"
		: $User->status . " (unknown status abbreviation)";
	$result .= "Status:     $status_string\n";

	$result .= "Section:    " . $User->section . "\n";
	$result .= "Recitation: " . $User->recitation . "\n";
	$result .= "Comment:    " . $User->comment . "\n";

	return $result;
}

sub format_userset {
	my ($self, $Set) = @_;
	my $ce = $self->r->ce;

	my $result = "Set ID:                    " . $Set->set_id . "\n";
	$result .= "Set header file:           " . $Set->set_header . "\n";
	$result .= "Hardcopy header file:      " . $Set->hardcopy_header . "\n";

	my $tz = $ce->{siteDefaults}{timezone};
	$result .= "Open date:                 " . $self->formatDateTime($Set->open_date,   $tz) . "\n";
	$result .= "Due date:                  " . $self->formatDateTime($Set->due_date,    $tz) . "\n";
	$result .= "Answer date:               " . $self->formatDateTime($Set->answer_date, $tz) . "\n";
	$result .= "Visible:                   " . ($Set->visible ? "yes" : "no") . "\n";
	$result .= "Assignment type:           " . $Set->assignment_type . "\n";
	if ($Set->assignment_type =~ /gateway/) {
		$result .= "Attempts per version:      " . $Set->assignment_type . "\n";
		$result .= "Time interval:             " . $Set->time_interval . "\n";
		$result .= "Versions per interval:     " . $Set->versions_per_interval . "\n";
		$result .= "Version time limit:        " . $Set->version_time_limit . "\n";
		$result .= "Version creation time:     " . $self->formatDateTime($Set->version_creation_time, $tz) . "\n";
		$result .= "Problem randorder:         " . $Set->problem_randorder . "\n";
		$result .= "Version last attempt time: " . $Set->version_last_attempt_time . "\n";
	}

	return $result;
}

sub format_userproblem {
	my ($self, $Problem) = @_;
	my $ce = $self->r->ce;

	my $result = "Problem ID:                   " . $Problem->problem_id . "\n";
	$result .= "Source file:                  " . $Problem->source_file . "\n";
	$result .= "Value:                        " . $Problem->value . "\n";
	$result .=
		"Max attempts                  " . ($Problem->max_attempts == -1 ? "unlimited" : $Problem->max_attempts) . "\n";
	$result .= "Random seed:                  " . $Problem->problem_seed . "\n";
	$result .= "Status:                       " . $Problem->status . "\n";
	$result .= "Attempted:                    " . ($Problem->attempted ? "yes" : "no") . "\n";

	my %last_answer = decodeAnswers($Problem->last_answer);
	if (%last_answer) {
		$result .= "Last answer:\n";
		foreach my $key (sort keys %last_answer) {
			$result .= "\t$key: $last_answer{$key}\n" if $last_answer{$key};
		}
	} else {
		$result .= "Last answer:                  none\n";
	}

	$result .= "Number of correct attempts:   " . $Problem->num_correct . "\n";
	$result .= "Number of incorrect attempts: " . $Problem->num_incorrect . "\n";

	return $result;
}

1;
