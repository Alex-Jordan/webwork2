################################################################################
# WeBWorK Online Homework Delivery System
# Copyright &copy; 2000-2021 The WeBWorK Project, https://github.com/openwebwork
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of either: (a) the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any later
# version, or (b) the "Artistic License" which comes with this package.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.	 See either the GNU General Public License or the
# Artistic License for more details.
################################################################################

package WeBWorK::ContentGenerator::Instructor::Config;
use Mojo::Base 'WeBWorK::ContentGenerator', -signatures;

=head1 NAME

WeBWorK::ContentGenerator::Instructor::Config - Config

=cut

use XML::LibXML;

use WeBWorK::CourseEnvironment;
use WeBWorK::ConfigObject::text;
use WeBWorK::ConfigObject::timezone;
use WeBWorK::ConfigObject::time;
use WeBWorK::ConfigObject::number;
use WeBWorK::ConfigObject::boolean;
use WeBWorK::ConfigObject::permission;
use WeBWorK::ConfigObject::permission_checkboxlist;
use WeBWorK::ConfigObject::list;
use WeBWorK::ConfigObject::checkboxlist;
use WeBWorK::ConfigObject::popuplist;
use WeBWorK::ConfigObject::setting;
use WeBWorK::ConfigObject::lms_context_id;
use WeBWorK::ConfigValues qw(getConfigValues);

# Write contents to outputFilePath and return error messages if any.
sub writeFile ($outputFilePath, $contents) {
	if (open my $OUTPUTFILE, '>:encoding(UTF-8)', $outputFilePath) {
		print $OUTPUTFILE $contents;
		close $OUTPUTFILE;
	} else {
		return (
			"I could not open $outputFilePath",
			'We will not be able to make configuration changes unless the permissions '
				. 'are set so that the web server can write to this file.'
		);
	}

	return;
}

# Make a new config object from data
sub objectify ($c, $data) {
	return "WeBWorK::ConfigObject::$data->{type}"->new($data, $c);
}

sub generate_navigation_tabs ($c, $current_tab, @tab_names) {
	my $tabs = $c->c;
	for my $tab (0 .. (scalar(@tab_names) - 1)) {
		if ($current_tab eq "tab$tab") {
			push(@$tabs, $c->tag('span', class => 'nav-link active', $c->maketext($tab_names[$tab])));
		} else {
			push(
				@$tabs,
				$c->link_to(
					$c->maketext($tab_names[$tab]) =>
						$c->systemLink($c->url_for, params => { section_tab => "tab$tab" }),
					class => 'nav-link'
				)
			);
		}
	}
	return $c->tag('nav', class => 'config-tabs nav nav-pills justify-content-center my-4', $tabs->join(''));
}

sub pre_header_initialize ($c) {
	$c->stash->{configValues} = [];

	return unless $c->authz->hasPermissions($c->param('user'), 'modify_problem_sets');

	my $ce = $c->ce;
	$c->stash->{configValues} = getConfigValues($ce);

	if ($c->param('make_changes')) {
		# Get a copy of the course environment which does not have simple.conf loaded
		my $ce3 = WeBWorK::CourseEnvironment->new({
			courseName          => $ce->{courseName},
			web_config_filename => 'noSuchFilePlease'
		});

		my $fileoutput = <<~ 'END_SIMPLE_CONF_HEADER';
			#!perl
			# This file is automatically generated by WeBWorK's web-based
			# configuration module.  Do not make changes directly to this
			# file.  It will be overwritten the next time configuration
			# changes are saved.

			END_SIMPLE_CONF_HEADER

		# Get the number of the current tab
		my $tab = ($c->param('section_tab') || 'tab0') =~ s/tab//r;

		# We completely rewrite the simple configuration file, so we need to go through all sections.
		for my $configSection (@{ $c->stash->{configValues} }) {
			my @configSectionArray = @$configSection;
			shift @configSectionArray;
			for my $con (@configSectionArray) {
				my $conobject = $c->objectify($con);
				if (
					$tab
					|| (defined $ce->{permissionLevels}{"change_config_$con->{var}"}
						&& !$c->authz->hasPermissions($c->param('user'), "change_config_$con->{var}"))
					)
				{
					# This configuration value is on a hidden tab or the user does not have permission to change this
					# configuration value.  So use the current course environment value.
					$fileoutput .= $conobject->save_string($conobject->get_value($ce3), 1);
				} else {
					# The visible tab contains this configuration value and the user has permission to change it.
					$fileoutput .= $conobject->save_string($conobject->get_value($ce3));
				}
			}
			$tab--;
		}

		my @write_result = writeFile("$ce->{courseDirs}{root}/simple.conf", $fileoutput);
		if (@write_result) {
			$c->addbadmessage($c->c(@write_result)->join($c->tag('br')));
		} else {
			$c->addgoodmessage($c->maketext('Changes saved.'));
		}
	}

	return;
}

1;
